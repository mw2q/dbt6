#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2003-2006 Open Source Development Labs, Inc.
#               2003-2006 Jenny Zhang
#               2004-2014 Mark Wong
#               2014      2ndQuadrant, Ltd.

EXPLAIN=0
EXPLAIN_ARG=
USE_OPROFILE=0
USE_LINUXPERF=0
NO_REFRESH=0
QUERIES="q1_1 q1_2 q1_3 q2_1 q2_2 q2_3 q3_1 q3_2 q3_3 q3_4 q4_1 q4_2 q4_3"

usage()
{
	echo "Usage: $0 -f <SCALE_FACTOR> [-e -p <db_params> -t <tag> -y]"
}

# process the command line parameters
while getopts "a:ef:p:o:s:yYz" opt; do
	case $opt in
		a)
			DATABASE=$OPTARG
			;;
		e)
			EXPLAIN=1
			EXPLAIN_ARG="-y"
			;;
		f)
			SCALE_FACTOR=$OPTARG
			;;
		o)
			OUTPUT_DIR=$OPTARG
			RESULTSDIR="${OUTPUT_DIR}/results"
			mkdir -p ${RESULTSDIR}
			;;
		p)
			PARAMETERS_ARG="-p \"$OPTARG\""
			;;
		s)
			SEED_FILE=$OPTARG
			;;
		y)
			USE_OPROFILE=1
			;;
		Y)
			USE_LINUXPERF=1
			;;
		z)
			NO_REFRESH=1
			;;
		\?)
			usage
			exit 1
			;;
		esac
done

if [ "x$DATABASE" = "x" ]; then
	echo "Specify database management system with -a flag"
	usage
	exit 1
fi

if [ $DATABASE = "pgsql" ]; then
	DBCMD="psql -v ON_ERROR_STOP=1 -X -e"
	EXPLAINCMD="EXPLAIN"
elif [ $DATABASE = "mysql" ]; then
	DBCMD="mysql -u root -D $DBNAME"
	EXPLAINCMD="EXPLAIN"
else
	echo "Unsupported database system"
	exit 1
fi

which gzip > /dev/null 2>&1
if [ $? -eq 0 ]; then
	GZIP=gzip
else
	GZIP=true
fi

dbt6-$DATABASE-stop-db || exit 1
eval dbt6-$DATABASE-start-db -o $OUTPUT_DIR $PARAMETERS_ARG || exit 1

# Get the execution plans.
PLANDIR=$OUTPUT_DIR/plans
mkdir -p $PLANDIR || exit 1
for N in $QUERIES; do
	Q=`cat $DSS_QUERY/$N.sql`
    $DBCMD << __EOF__ > $PLANDIR/$N.txt
$EXPLAINCMD
$Q
__EOF__
done

# Start collecting system statistics.
dbt6-sysstats --outdir $OUTPUT_DIR --sample 60 || exit 1

# Collect database statistics
dbt6-$DATABASE-dbstat ${OUTPUT_DIR} &

# Clear the read profile counters.
if [ -f /proc/profile ]; then
	clearprof
fi

# Clear the oprofile counters.
if [ $USE_OPROFILE -eq 1 ]; then
	clearoprof
fi

s_time_power=`date +%s`
dbt6-$DATABASE-time-statistics -s -n PERF.POWER || exit 1

# Execute the queries.
if [ $EXPLAIN -eq 1 ]; then
	# This is currently a PostgreSQL special case.
	EXPLAINCMD2="EXPLAIN (ANALYZE, BUFFERS)"
fi
for N in $QUERIES; do
	Q=`cat $DSS_QUERY/$N.sql`
	if [ $USE_LINUXPERF -eq 1 ]; then
		PERFDIR=$OUTPUT_DIR/perf/$N
		mkdir -p $PERFDIR
		PERFCOMMAND="perf record -a -g -s -F 100 -o $PERFDIR/$N-perf.data"
	fi
	TASK="PERF.POWER.$N"
	dbt6-$DATABASE-time-statistics -s -n $TASK || exit 1
	eval $PERFCOMMAND $DBCMD << __EOF__ \
			> $RESULTSDIR/$N.txt 2>> $OUTPUT_DIR/power.txt
$EXPLAINCMD2
$Q
__EOF__
	dbt6-$DATABASE-time-statistics -e -n $TASK || exit 1
done

dbt6-$DATABASE-time-statistics -e -n PERF.POWER || exit 1
e_time_power=`date +%s`
echo "`date`: Power Test completed."
diff_time=$(( $e_time_power - $s_time_power ))
echo "Elapsed time for Power Test : $diff_time seconds"

# Stop collecting system statistics.
read SARPID < ${OUTPUT_DIR}/sar.pid
kill ${SARPID}
read PIDSTATPID < ${OUTPUT_DIR}/pidstat.pid
kill ${PIDSTATPID}
read DBSTATPID < ${OUTPUT_DIR}/dbstat.pid
kill ${DBSTATPID}

dbt6-$DATABASE-stop-db || exit 1

if [ -f /proc/profile ]; then
	profname="Power_Test"
	getprof
fi

if [ $USE_OPROFILE -eq 1 ]; then
	profname="Power_Test"
	getoprof
fi

if [ $USE_LINUXPERF -eq 1 ]; then
	echo "Generating Linux perf reports for power test..."
	for N in $QUERIES; do
		PERFDIR=$OUTPUT_DIR/perf/$N
		PERFPREFIX=$N
		(perf report -i $PERFDIR/$PERFPREFIX-perf.data -n \
				> $PERFDIR/$PERFPREFIX-perf-report.txt && \
				$GZIP $PERFDIR/$PERFPREFIX-perf-report.txt) &
		(perf annotate -l -P -i $PERFDIR/$PERFPREFIX-perf.data \
				> $PERFDIR/$PERFPREFIX-perf-annotate.txt \
				&& $GZIP $PERFDIR/$PERFPREFIX-perf-annotate.txt) &
		(perf script -L -i $PERFDIR/$PERFPREFIX-perf.data \
				> $PERFDIR/$PERFPREFIX-perf-trace.txt \
				&& $GZIP $PERFDIR/$PERFPREFIX-perf-trace.txt) &
	done > $OUTPUT_DIR/perf/report-output.txt 2>&1
	wait
fi

if [ $EXPLAIN -eq 1 ]; then
	# Generate plan disaster report only if EXPLAIN ANALYZE is used.
	DISASTERCSV=$OUTPUT_DIR/disaster.csv
	for N in $QUERIES; do
		dbt6-$DATABASE-plan-disaster $RESULTSDIR/$N.txt >> $DISASTERCSV
	done
	sort -n -t "," -k 2 -r -o $DISASTERCSV $DISASTERCSV
fi
