#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2002-2006 Open Source Development Labs, Inc.
#               2002-2006 Jenny Zhang
#               2005-2014 Mark Wong
#               2014      2ndQuadrant, Ltd.
#

# 15 July 2004 - Revamped by Mark Wong

DIR=`dirname $0`
. ${DIR}/../dbt3_profile || exit 1

SRCDIR=${DBT3_HOME}

DBSCRIPTDIR=$SRCDIR/scripts/pgsql

DBSTATS="$DBSCRIPTDIR/db_stats.sh"

PARAMETERS=""
SF=0
USE_OPROFILE=0
USE_LINUXPERF=0
GENERATE=0
ONLY_LOAD=0
DBDATA=${DSS_PATH}
WORKLOAD="H"
while getopts "d:f:g:lo:p:RtyYz:" opt; do
	case $opt in
	d)
		DBDATA=${OPTARG}
		export DSS_PATH=$DBDATA
		mkdir -p $DSS_PATH
		;;
	f)
		SF=$OPTARG
		;;
	g)
		GENERATE=$OPTARG
		;;
	l)
		ONLY_LOAD=1
		;;
	o)
		OUTPUT_DIR=$OPTARG
		mkdir -p $OUTPUT_DIR
		;;
	p)
		PARAMETERS="${LOAD_PARAMETERS} $OPTARG"
		PARAMETERS_ARG="-p \"${LOAD_PARAMETERS} $OPTARG\""
		;;
	R)
		WORKLOAD="R"
		WORKLOAD_ARG="-R"
		;;
	t)
		TABLESPACE_FLAG="-t -b"
		;;
	y)
		USE_OPROFILE=1
		;;
	Y)
		USE_LINUXPERF=1
		;;
	z)
		DBPORT=$OPTARG
		;;
	?)
		echo "Usage: $0 [-o <dir> -p <db_param> -f <scale_factor>]"
		exit 1
	esac
done

if test -z $OUTPUT_DIR ; then 
  OUTPUT_DIR=$DBSCRIPTDIR/output
  mkdir -p $OUTPUT_DIR
fi

if [ $GENERATE -ne 0 ]; then
	echo "`date` Generating data for scale factor $SF..."
	# DBGEN reads DSS_PATH env var to determine where to put the files
	${DBGEN} -fF -s $SF || exit 1
	chmod a+r ${DSS_PATH}/*.tbl
else
	echo "Create the database using existing datafiles."
fi

# Start collecting system statistics.
${SRCDIR}/scripts/dbt3-sysstats --outdir ${OUTPUT_DIR} --sample 60 \
		> /dev/null 2>&1

$DBSCRIPTDIR/dbt3-pgsql-create-db -o ${OUTPUT_DIR} -l ${DBPORT} \
		${PARAMETERS_ARG}
	
${DBSCRIPTDIR}/dbt3-pgsql-drop-tables -l ${DBPORT} || exit 1
${DBSCRIPTDIR}/dbt3-pgsql-create-tables -d ${DBDATA} -l ${DBPORT} ${TABLESPACE_FLAG} || exit 1

echo "`date` Load Test Starting..."
s_time=`date +%s`
record_start "LOAD" || exit 1

# Collect database statistics
${DBSTATS} ${OUTPUT_DIR} ${DBPORT} 2> /dev/null &

# Initialize profile counters.
if [ -f /proc/profile ]; then
	clearprof
fi

if [ ${USE_OPROFILE} -eq 1 ]; then
	clearoprof
fi

if [ ${USE_LINUXPERF} -eq 1 ]; then
	perf_start ${OUTPUT_DIR}/perf &
fi

${DBSCRIPTDIR}/dbt3-pgsql-load-data -d ${DBDATA} || exit 1

if [ ${ONLY_LOAD} -eq 0 ]; then
	echo "`date` Building indexes... "
	${DBSCRIPTDIR}/dbt3-pgsql-create-indexes -l ${DBPORT} ${TABLESPACE_FLAG} \
			${WORKLOAD_ARG} || exit 1
	echo "Done building indexes... "
fi

record_end "LOAD" || exit 1
e_time=`date +%s`
diff_time=`expr $e_time - $s_time`
echo "Elapsed time for Load Test : $diff_time seconds"

# Stop collecting system statistics.
read SARPID < ${OUTPUT_DIR}/sar.pid
kill ${SARPID} > /dev/null 2>&1
read PIDSTATPID < ${OUTPUT_DIR}/pidstat.pid
kill ${PIDSTATPID}
read DBSTATSPID < ${OUTPUT_DIR}/db_stats.pid
kill ${DBSTATSPID} > /dev/null 2>&1

psql -X -p ${DBPORT} -d ${SID} -o ${OUTPUT_DIR}/db-size.txt << __EOF__
SELECT pg_database_size('${SID}');
__EOF__

psql -X -p ${DBPORT} -d ${SID} -o ${OUTPUT_DIR}/table-size.txt << __EOF__
SELECT tablename, pg_relation_size(tablename::text) AS relation_size,
       pg_table_size(tablename::text) AS table_size,
       pg_indexes_size(tablename::text) AS index_size
FROM pg_tables
WHERE schemaname = 'public'
  AND tablename <> 'time_statistics'
ORDER BY tablename;
__EOF__

# Collect profile data.
if [ -f /proc/profile ]; then
	profname='Load_Test'
	getprof
fi

if [ $USE_OPROFILE -eq 1 ]; then
	profname='Load_Test'
	getoprof
fi

if [ ${USE_LINUXPERF} -eq 1 ]; then
	perf_collect ${OUTPUT_DIR}/perf
fi
